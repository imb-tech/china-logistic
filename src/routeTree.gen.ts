/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'
import { Route as AuthImport } from './routes/_auth'
import { Route as MainIndexImport } from './routes/_main/index'
import { Route as MainWarehouseImport } from './routes/_main/warehouse'
import { Route as MainSettingsImport } from './routes/_main/settings'
import { Route as MainOrdersImport } from './routes/_main/orders'
import { Route as MainLogisticsImport } from './routes/_main/logistics'
import { Route as MainDocumentsImport } from './routes/_main/documents'
import { Route as MainCustomersImport } from './routes/_main/customers'
import { Route as MainOrdersOrderCreateImport } from './routes/_main/_orders/order-create'

// Create Virtual Routes

const AuthAuthLazyImport = createFileRoute('/_auth/auth')()

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexRoute = MainIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any)

const AuthAuthLazyRoute = AuthAuthLazyImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth/auth.lazy').then((d) => d.Route))

const MainWarehouseRoute = MainWarehouseImport.update({
  id: '/warehouse',
  path: '/warehouse',
  getParentRoute: () => MainRoute,
} as any)

const MainSettingsRoute = MainSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => MainRoute,
} as any)

const MainOrdersRoute = MainOrdersImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => MainRoute,
} as any)

const MainLogisticsRoute = MainLogisticsImport.update({
  id: '/logistics',
  path: '/logistics',
  getParentRoute: () => MainRoute,
} as any)

const MainDocumentsRoute = MainDocumentsImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => MainRoute,
} as any)

const MainCustomersRoute = MainCustomersImport.update({
  id: '/customers',
  path: '/customers',
  getParentRoute: () => MainRoute,
} as any)

const MainOrdersOrderCreateRoute = MainOrdersOrderCreateImport.update({
  id: '/_orders/order-create',
  path: '/order-create',
  getParentRoute: () => MainRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/_main/customers': {
      id: '/_main/customers'
      path: '/customers'
      fullPath: '/customers'
      preLoaderRoute: typeof MainCustomersImport
      parentRoute: typeof MainImport
    }
    '/_main/documents': {
      id: '/_main/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof MainDocumentsImport
      parentRoute: typeof MainImport
    }
    '/_main/logistics': {
      id: '/_main/logistics'
      path: '/logistics'
      fullPath: '/logistics'
      preLoaderRoute: typeof MainLogisticsImport
      parentRoute: typeof MainImport
    }
    '/_main/orders': {
      id: '/_main/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof MainOrdersImport
      parentRoute: typeof MainImport
    }
    '/_main/settings': {
      id: '/_main/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof MainSettingsImport
      parentRoute: typeof MainImport
    }
    '/_main/warehouse': {
      id: '/_main/warehouse'
      path: '/warehouse'
      fullPath: '/warehouse'
      preLoaderRoute: typeof MainWarehouseImport
      parentRoute: typeof MainImport
    }
    '/_auth/auth': {
      id: '/_auth/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthAuthLazyImport
      parentRoute: typeof AuthImport
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexImport
      parentRoute: typeof MainImport
    }
    '/_main/_orders/order-create': {
      id: '/_main/_orders/order-create'
      path: '/order-create'
      fullPath: '/order-create'
      preLoaderRoute: typeof MainOrdersOrderCreateImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthAuthLazyRoute: typeof AuthAuthLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAuthLazyRoute: AuthAuthLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface MainRouteChildren {
  MainCustomersRoute: typeof MainCustomersRoute
  MainDocumentsRoute: typeof MainDocumentsRoute
  MainLogisticsRoute: typeof MainLogisticsRoute
  MainOrdersRoute: typeof MainOrdersRoute
  MainSettingsRoute: typeof MainSettingsRoute
  MainWarehouseRoute: typeof MainWarehouseRoute
  MainIndexRoute: typeof MainIndexRoute
  MainOrdersOrderCreateRoute: typeof MainOrdersOrderCreateRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainCustomersRoute: MainCustomersRoute,
  MainDocumentsRoute: MainDocumentsRoute,
  MainLogisticsRoute: MainLogisticsRoute,
  MainOrdersRoute: MainOrdersRoute,
  MainSettingsRoute: MainSettingsRoute,
  MainWarehouseRoute: MainWarehouseRoute,
  MainIndexRoute: MainIndexRoute,
  MainOrdersOrderCreateRoute: MainOrdersOrderCreateRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/customers': typeof MainCustomersRoute
  '/documents': typeof MainDocumentsRoute
  '/logistics': typeof MainLogisticsRoute
  '/orders': typeof MainOrdersRoute
  '/settings': typeof MainSettingsRoute
  '/warehouse': typeof MainWarehouseRoute
  '/auth': typeof AuthAuthLazyRoute
  '/': typeof MainIndexRoute
  '/order-create': typeof MainOrdersOrderCreateRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/customers': typeof MainCustomersRoute
  '/documents': typeof MainDocumentsRoute
  '/logistics': typeof MainLogisticsRoute
  '/orders': typeof MainOrdersRoute
  '/settings': typeof MainSettingsRoute
  '/warehouse': typeof MainWarehouseRoute
  '/auth': typeof AuthAuthLazyRoute
  '/': typeof MainIndexRoute
  '/order-create': typeof MainOrdersOrderCreateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_main': typeof MainRouteWithChildren
  '/_main/customers': typeof MainCustomersRoute
  '/_main/documents': typeof MainDocumentsRoute
  '/_main/logistics': typeof MainLogisticsRoute
  '/_main/orders': typeof MainOrdersRoute
  '/_main/settings': typeof MainSettingsRoute
  '/_main/warehouse': typeof MainWarehouseRoute
  '/_auth/auth': typeof AuthAuthLazyRoute
  '/_main/': typeof MainIndexRoute
  '/_main/_orders/order-create': typeof MainOrdersOrderCreateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/customers'
    | '/documents'
    | '/logistics'
    | '/orders'
    | '/settings'
    | '/warehouse'
    | '/auth'
    | '/'
    | '/order-create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/customers'
    | '/documents'
    | '/logistics'
    | '/orders'
    | '/settings'
    | '/warehouse'
    | '/auth'
    | '/'
    | '/order-create'
  id:
    | '__root__'
    | '/_auth'
    | '/_main'
    | '/_main/customers'
    | '/_main/documents'
    | '/_main/logistics'
    | '/_main/orders'
    | '/_main/settings'
    | '/_main/warehouse'
    | '/_auth/auth'
    | '/_main/'
    | '/_main/_orders/order-create'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  MainRoute: typeof MainRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  MainRoute: MainRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_main"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/auth"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/customers",
        "/_main/documents",
        "/_main/logistics",
        "/_main/orders",
        "/_main/settings",
        "/_main/warehouse",
        "/_main/",
        "/_main/_orders/order-create"
      ]
    },
    "/_main/customers": {
      "filePath": "_main/customers.tsx",
      "parent": "/_main"
    },
    "/_main/documents": {
      "filePath": "_main/documents.tsx",
      "parent": "/_main"
    },
    "/_main/logistics": {
      "filePath": "_main/logistics.tsx",
      "parent": "/_main"
    },
    "/_main/orders": {
      "filePath": "_main/orders.tsx",
      "parent": "/_main"
    },
    "/_main/settings": {
      "filePath": "_main/settings.tsx",
      "parent": "/_main"
    },
    "/_main/warehouse": {
      "filePath": "_main/warehouse.tsx",
      "parent": "/_main"
    },
    "/_auth/auth": {
      "filePath": "_auth/auth.lazy.tsx",
      "parent": "/_auth"
    },
    "/_main/": {
      "filePath": "_main/index.tsx",
      "parent": "/_main"
    },
    "/_main/_orders/order-create": {
      "filePath": "_main/_orders/order-create.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
